[{"/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/presentLayer.js":"1","/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/amountContext.js":"2","/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/index.js":"3","/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/amountReducer.js":"4","/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/reportWebVitals.js":"5","/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/App.js":"6"},{"size":4319,"mtime":1607856730859,"results":"7","hashOfConfig":"8"},{"size":1056,"mtime":1607854697943,"results":"9","hashOfConfig":"8"},{"size":502,"mtime":1607706698896,"results":"10","hashOfConfig":"8"},{"size":2013,"mtime":1607800666873,"results":"11","hashOfConfig":"8"},{"size":362,"mtime":1607703315919,"results":"12","hashOfConfig":"8"},{"size":276,"mtime":1607795137001,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1dvu6lq",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/presentLayer.js",["28","29"],"import React, { useContext, useState } from 'react';\nimport { TransContext } from './amountContext';\nimport './App.css';\n\nfunction PresentLayer() {\n    let { transactions, addTransaction } = useContext(TransContext);\n    // transactions contains [{string, amount}, {string, amount}, {string, amount}]\n\n    let [newDesc, setDesc] = useState(\"\");\n    let [newAmount, setAmount] = useState(0);\n\n    let [del, setDel] = useState(0);\n\n    const handledAddition = (event) => {    // By default handledAddition will bring some event with submit button\n        event.preventDefault();\n        if (Number(newAmount) === 0) {\n            alert(\"You have entered 0\\nPlease enter valid Transaction\");\n        } else {\n            addTransaction({\n                stringInfo: newDesc,\n                amount: Number(newAmount)\n            })\n        }\n        setDesc('');\n        setAmount(0);\n    }\n\n    const getIncome = () => {\n        var income = 0;\n        for (var i = 0; i < transactions.length; i++) {\n            if (transactions[i].amount > 0) {\n                income += transactions[i].amount\n            }\n        }\n        return income\n    }\n\n    const getExpense = () => {\n        var expense = 0;\n        for (var i = 0; i < transactions.length; i++) {\n            if (transactions[i].amount < 0) {\n                expense += transactions[i].amount\n            }\n        }\n        return expense\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"text-center\">\n                <h1>Expense Tracker</h1>\n                <h4>CURRENT BALANCE</h4>\n                <h1>${getIncome() + getExpense()}</h1>\n            </div>\n            <div className=\"amount-container\">\n                <h3>INCOME<br />${getIncome()}</h3>\n                <h3>EXPENSE<br />${getExpense()}</h3>\n            </div>\n            <h3 className=\"text-center\">Transaction Hisotry</h3>\n            <hr />\n            <ul className=\"history-form\">\n                {transactions.map((transObject, index) => {\n                    return (\n                        <li key={index}>\n                            <span>{transObject.stringInfo}</span>\n                            <span>{transObject.amount}</span>\n                        </li>\n                    )\n                })}\n            </ul>\n            <h3 className=\"text-center\">Add New Transaction</h3>\n            <hr />\n            <form className=\"transaction-form\" onSubmit={handledAddition}>\n                <label htmlFor=\"des\"><strong>Description</strong></label><br />\n                <input\n                    type=\"text\"\n                    id=\"des\"\n                    value={newDesc}\n                    placeholder=\"Detail of Transaction\"\n                    onChange={(event) => setDesc(event.target.value)}\n                    required></input><br />\n                <label htmlFor=\"trans\"><strong>Transaction Amount</strong></label><br />\n                <input\n                    type=\"number\"\n                    id=\"trans\"\n                    value={newAmount}\n                    placeholder=\"Dollar Value of Transaction\"\n                    onChange={(event) => setAmount(event.target.value)}\n                    required></input><br />\n                <input\n                    type=\"submit\"\n                    value=\"Add Transaction\"></input><br />\n            </form>\n        </div>\n    );\n}\n\nexport default PresentLayer;\n\n/*\n{transHistory.map((transObject, index)=>{\n    <li>\n        <span>{transObject.stringInfo}</span>\n        <span>{transObject.amount}</span>\n    </li>\n})}\n[x] .map() will print transHistory in <li>\n[x] transObject contains {stringInfo, amount} present in transHistory\n[x] Warning: Each child in a list should have a unique \"key\" prop; So index is used for\nthis error repmoval to uniquely identify each element of array. It is like a for loop for iteration.\n[x] https://reactjs.org/docs/lists-and-keys.html#keys\n[x] Humlogon main <li> sirf 1 hi banaya hai but web pr render 3 times hua hai tw usse har ek ke liye unique key chaihye hota hai jiss se wo usse identify kr saky\n*/\n\n/*\n<input type=\"text\" id=\"des\" onChange={ (event)=> setDesc(event.target.value)} required></input>\nWhat onChange will do? Jub bhi input change hoga, ek event chalega jo setDesc ko set krdega jo user ne input kari hogi value\n*/",["30","31"],"/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/amountContext.js",[],"/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/index.js",[],"/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/amountReducer.js",[],"/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/reportWebVitals.js",[],"/home/asad/Cloud-Computing/BootCamp2020-old/BootCamp2020-Class06/expense-tracker-example01/src/App.js",["32"],{"ruleId":"33","severity":1,"message":"34","line":12,"column":10,"nodeType":"35","messageId":"36","endLine":12,"endColumn":13},{"ruleId":"33","severity":1,"message":"37","line":12,"column":15,"nodeType":"35","messageId":"36","endLine":12,"endColumn":21},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"33","severity":1,"message":"42","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":25},"no-unused-vars","'del' is assigned a value but never used.","Identifier","unusedVar","'setDel' is assigned a value but never used.","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]